#+title: afspm Overview
#+startup: beamer
#+latex_class: beamer
# 10pt dictates the overall font size, from 8-12.
#+latex_class_options: [presentation, 9pt]

# Set toc to nil if no outline is desired.
# h/headlines is the headlines level considered for slides.
#+options: h:2 toc:1

# Set institute
#+beamer_header:\institute{National Research Council Canada (NRC/CNRC)}

# Remove weird navigation buttons
#+beamer_header:\setbeamertemplate{navigation symbols}{}

# --- Set our theme! --- #
# -- Colors -- #
# Outer Color theme: whale, seahorse, dolphin
#+beamer_header: \usecolortheme{dolphin}
# Inner Color theme: rose, lily, orchid
#+beamer_header: \usecolortheme{rose}

#+beamer_header:\definecolor{mellowgreen}{rgb}{0.25, 0.5, 0.25}
#+beamer_header:\definecolor{mellowblue}{rgb}{0.25, 0.25, 0.5}
#+beamer_header:\definecolor{lessmellowblue}{rgb}{0.0, 0.33, 0.66}
#+beamer_header:\definecolor{urlblue}{rgb}{0.25, 0.25, 0.75}
#+beamer_header:\definecolor{mydarkgray}{rgb}{0.4, 0.4, 0.4}

# Main hook: structure. All other theme colors will be based on this.
#+beamer_header:\setbeamercolor{structure}{fg=mellowblue}

# Change the normal text color, to be less garish
#+beamer_header:\setbeamercolor{normal text}{fg=mydarkgray}

# Set urls blue
#+beamer_header:\hypersetup{colorlinks, allcolors=., urlcolor=urlblue}

# Set 'alert' (org bold) to be a nice bolded color.
# Define % between structure and black
#+beamer_header:\setbeamercolor{alerted text}{fg=structure!85!white}
#+beamer_header:\setbeamerfont{alerted text}{series=\bfseries}

# -- Theme structure -- #
# Inner theme: default, circles, rectangles, rounded
#+beamer_inner_theme: rectangles
#+beamer_outer_theme: [subsection=false, footline=authortitle]miniframes

# Add frame numbers
#+beamer_header:\setbeamertemplate{page number in head/foot}[framenumber]

# Provides nicer equation fonts
#+beamer_font_theme: professionalfonts
#+beamer_header:\documentclass[xcolor=SeaGreen]{beamer}

# Uncomment to skip animations
#+latex_class_options: [handout, 9pt]

#+property: header-args :mkdirp yes :results value drawer

* Justification
** SPM Basics
In Scanning Probe Microscopy (SPM), an *atomically-sharp tip* is *scanned* above a *surface*, while *measuring* one or more *properties* gleaned from this tip.
#+beamer:\medskip

This process allows *atomic-level imaging* of properties, spectroscopic analysis, and even manipulation of a sample (toward *atomic-scale manufacturing*).

*** AFM Configuration :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:END:
# https://en.wikipedia.org/wiki/File:AFM_conf.jpg
#+attr_org: :width 50%
#+attr_latex: :width 0.75\linewidth
#+caption: Typical AFM Configuration, Tom Toyosaki, Wikimedia Commons.
[[./images/AFM_conf.jpg]]
*** AFM Topography :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.5
:END:
# https://en.wikipedia.org/wiki/Atomic_force_microscopy#/media/File:Schematics_of_Topographic_image_forming.jpg
#+attr_org: :width 50%
#+attr_latex: :width 0.75\linewidth
#+caption: Schematics of AFM topographic image forming, Tom Toyosaki, Wikimedia Commons.
[[./images/Schematics_of_Topographic_image_forming.jpg]]

** Standard Experiment
*** Image :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.45
:END:
#+attr_org: :width 50%
#+attr_latex: :width 0.95\linewidth
[[./images/experiment_no_automation.png]]
*** Description :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.55
:END:
In a traditional SPM experiment, a researcher with domain knowledge will:
1. *Prepare the system*: including defining the SPM mode (e.g. FM-AFM).
2. *Run the experiment*: monitoring collected scans, deciding on next scans, and updating any aspects of the experiment.
3. *Finalize the experiment*: by undoing any experiment-specific setup needed to run.
#+beamer:\pause
*** Note :B_ignoreheading:
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:
#+beamer:\bigskip
#+beamer:\centering
/Running the experiment is often *long*, and requires *constant* researcher *attention*./

** System Scripting and Code Reuse
*** Description :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.55
:END:
Many SPM systems allow custom scripts to run an experiment.

#+beamer:\medskip
However:
- Scripts written for a *specific* SPM system *cannot be re-used* for other SPM systems: different API/language constraints.
- While *decoupling* of SPM device and experiment logic *is possible*, it is *rarely* a *priority* for researchers.
*** Image :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.45
:END:
#+attr_org: :width 50%
#+attr_latex: :width 0.95\linewidth
[[./images/experiment_with_script.png]]
#+beamer:\pause
*** Note :B_ignoreheading:
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:
#+beamer:\bigskip
#+beamer:\centering
/Code *reuse* is *rare*./
* Introduction to afspm
** Goals and Scope
#+beamer:\pause
*** Goals
- *Clear Decoupling*: of SPM device specifics from the desired experiment; to allow reuse of a given experiment on multiple devices.
- *Multi-Language Support*: for integration with SPM devices; we should not be the limiting factor to integration.
- *Pausable Automation*: to allow a researcher to take over.
- *Separable on Multiple Devices*: composed of concise, separable components.
#+beamer:\pause
*** Scope
afspm will concern itself *only* with automation of high-level, low-frequency decisions a researcher would perform *during* an experiment.

** High-Level Design
*** Image: :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.45
:END:
#+attr_org: :width 50%
#+attr_latex: :width 0.95\linewidth
[[./images/afspm_hl_diagram.png]]
*** Notes :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.55
:END:
*afspm* is designed around 'computation' components that correspond to nodes in a network. An experiment contains:
- *Microscope Translator*: communicates with microscope, translating between afspm-generic and microscope-specific language.
- *Microscope Intermediary*: mediates control of the microscope (only 1 component in control at a time) and caches data received from microscope.
- *Other Components*: the one or more components the user requires to run their experiment.
** Communication Protocol
*** Image :B_ignoreheading:
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:
#+attr_org: :width 50%
#+attr_latex: :width 0.5\linewidth
[[./images/network_framework.png]]

*** Notes :B_ignoreheading:
:PROPERTIES:
:BEAMER_env: ignoreheading
:END:
*afspm* uses protobuffers and ZeroMQ (both cross-platform / cross-language).
#+beamer:\pause
***** protobuffers: Serialization / Deserialization Library
Translates data structures into a format that can be stored/communicated).
#+beamer:\pause
***** ZeroMQ: Communication / Concurrency Library
Allows data to be sent between 'sockets' via common 'nodes'. Abstracts away protocols used, allowing easy switching between different protocols (e.g., TCP/IP, interprocess communication, threads).

** Example
#+attr_org: :width 50%
#+attr_latex: :width 0.75\linewidth
[[./images/afspm_hl_example.png]]

- *Experiment* constantly decides on the next region to scan.
- *Tip Detector* constantly evaluates the state of the tip, logging a problem if deemed poor.
- *Tip Corrector* takes control if 'bad tip' problem has been logged, takes steps to fix it, and releases control once fixed (according to the detector).

* Design Particulars
** I/O Paths
#+beamer:\pause
*** Publisher-Subscriber Path
- The MicroscopeTranslator *publishes* ScanState, ScanParameters, and Scan *changes*.
- These are passed on by the MicroscopeIntermediary. Data is *stored* in a *cache* and re-sent to new/crashed components.
- Each component choose what aspects to *subscribe* to, and receives data from these.
#+beamer:\pause
*** Control Path
- Each component can send *control requests* over its client.
- The MicroscopeIntermediary determines which *client* is *in-control*, and *forwards* these to the MicroscopeTranslator.
- The MicroscopeTranslator *receives* control requests from one client and *responds*.
** afspm: Detailed View
#+attr_org: :width 50%
#+attr_latex: :width 1.0\linewidth
[[./images/afspm_control.png]]
** afspm Controller
#+beamer:\pause
*** Cache Logic
Data is *stored* into the *cache* according to a *user-defined configuration*.

#+beamer:\medskip
These map a *protobuf message* to a *cache key* (envelope), and vice-versa.
#+beamer:\pause
*** Experiment Problems
Any component can *report* experiment *problems*, indicating issues that should cause the experiment to *pause* until *resolved*, and can *remove* these problems.

#+beamer:\medskip
This allows, e.g., detecting a tip crash and attempting to correct it.

#+beamer:\pause
*** Control Modes
The MicroscopeIntermediary defines the *control mode*, which can be:
- *Automated*: default, automation runs.
- *Manual*: pause automation.
- *Problem*: experiment problems are logged, pause automation.
** The Config File
*** Description :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.6
:END:
afspm uses a *single* TOML *configuration file* per experiment.

#+beamer:\medskip
Within this file, a user defines:
- The communication protocols used between components.
- Common variables passed between components (e.g. how big the scan size will be).
- The components to spawn.

#+beamer:\medskip
Top-level definitions can function as *variables*: any *references* deeper in the config are *replaced* by them. This should minimize repeating oneself.

*** Image :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.4
:END:
#+attr_org: :width 50%
#+attr_latex: :width 1.0\linewidth
[[./images/config_toml.png]]


** Spawning the Experiment
#+beamer:\pause
*** Distributed Computing
Components can be *split up* among devices; on startup, the components to spawn can be specified.

#+beamer:\pause
*** Component Monitoring
All spawned components are *monitored*:
- Each sends *heartbeats* at a regular cadence.
- If one *stops* beating, it is *restarted*.

This should minimize a crash breaking experiments.
** The End :BMCOL:
:PROPERTIES:
:BEAMER_col: 1.0
:END:
#+beamer:\centering
Let us know what you think and help us make it better.

#+beamer:\medskip
[[https://www.github.com/nsulmol/afspm][afspm on github]]
