#+title: Overview Code

#+property: header-args :mkdirp yes :results value drawer

#+name: attr_fit_width
#+begin_src bash :var data="" :var org_percent=50 :var latex_percent=80 :results output :exports none
  echo "#+attr_org: :width $org_percent%"
  echo "#+attr_latex: :width $(bc <<< "scale=2; $latex_percent/100")\linewidth"
  echo "$data"
#+end_src

#+RESULTS: attr_fit_width
:results:
#+attr_org: :width 50%
#+attr_latex: :width .80\linewidth

:end:

* Experiment No Automation

#+begin_src plantuml :file images/experiment_no_automation.png
  !include style.puml
  !include microscopy.puml

  !include <material/person_box>
  !include <material/document>

  component "user\n<$ma_person_box>" as user
  spmcon <--r-- user: low freq. \ncommands

  component "experiment\n<$ma_document>" as exp
  user <.. exp: experimental \nsteps
  #+end_src

  #+RESULTS:
  :results:
  [[file:images/experiment_no_automation.png]]
  :end:
* SPM-Specific Automation

#+begin_src plantuml :file images/experiment_with_script.png
  !include style.puml
  !include microscopy.puml

  !include <material/script>

  component "experiment script\n<$ma_script>" as exp_script
  spmcon <--r-- exp_script: low freq. \ncommands
  #+end_src

  #+RESULTS:
  :results:
  [[file:images/experiment_with_script.png]]
  :end:

* afspm High-Level Diagram

#+begin_src plantuml :file images/afspm_hl_diagram.png
  !include style.puml
  !include microscopy.puml

  !include <material/network>
  !include <material/tune>
  !include <material/chart_areaspline>
  !include <material/script>

  package "afspm abstraction" <<groupinternal>> {
    component "microscope\ntranslator\n<$ma_network>" <<interface>> <<required>> as translator
    component "microscope\nscheduler\n<$ma_tune>" <<internal>> <<required>> as scheduler

    component "experiment\n<$ma_script>" <<internal>> as exp
    component "visualizer\n<$ma_chart_areaspline>" <<internal>> as viz

    translator <--> scheduler

    scheduler <--> exp
    scheduler <--> viz
  }

  spmcon <-> translator: low freq. \ncommands
  #+end_src

  #+RESULTS:
  :results:
  [[file:images/afspm_hl_diagram.png]]
  :end:
* afspm High-Level Diagram Example

#+begin_src plantuml :file images/afspm_hl_example.png
  !include style.puml
  !include microscopy.puml

  !include <material/network>
  !include <material/tune>
  !include <material/chart_areaspline>
  !include <material/script>
  !include <material/alert_box>
  !include <material/wrench>
  !include <material/crop>

  package "afspm abstraction" <<groupinternal>> as afspm {
    component "microscope\ntranslator\n<$ma_network>" <<interface>> <<required>> as translator
    component "microscope\nscheduler\n<$ma_tune>" <<internal>> <<required>> as scheduler

    component "experiment\n<$ma_script>" <<internal>> <<optional>> as exp
    component "roi analyzer\n<$ma_crop>" <<internal>> as roi
    component "tip detector\n<$ma_alert_box>" <<internal>> <<optional>> as tip_detector
    component "visualizer\n<$ma_chart_areaspline>" <<internal>> as viz

    translator <--> scheduler

    scheduler -l-> exp: scope state
    scheduler --> roi: scans
    roi -l-> exp: roi points
    exp -r-> scheduler: scan\nparameters

    scheduler -r-> tip_detector: scans
    tip_detector .l.> scheduler: log tip\nproblem

    scheduler --> viz: scans
  }

  spmcon <-r-> translator: low freq.\ncommands

  #+end_src

  #+RESULTS:
  :results:
  [[file:images/afspm_hl_example.png]]
  :end:

* afspm High-Level Diagram Example (2)

#+begin_src plantuml :file images/afspm_hl_example2.png
  !include style.puml
  !include microscopy.puml

  !include <material/network>
  !include <material/tune>
  !include <material/chart_areaspline>
  !include <material/script>
  !include <material/alert_box>
  !include <material/wrench>
  !include <material/repeat>

  package "generic abstraction" <<groupinternal>> as afspm {

    component "microscope\ntranslator\n<$ma_network>" <<interface>> <<required>> as translator
    component "microscope\nscheduler\n<$ma_tune>" <<internal>> <<required>> as scheduler

    translator <--> scheduler

    package " " <<layout>> as feedback_group {
      component "feedback\noptimizer\n<$ma_repeat>" <<internal>> <<optional>> as feedback_optimizer
      component "feedback\nanalyzer\n<$ma_alert_box>" <<internal>> <<optional>> as feedback_analyzer

      feedback_analyzer -[hidden]down- feedback_optimizer
    }


    package " " <<layout>> as tip_group {
      component "tip state\nanalyzer\n<$ma_alert_box>" <<internal>> <<optional>> as tip_detector
      component "tip state\ncorrector\n<$ma_wrench>" <<internal>> <<optional>> as tip_corrector

      tip_detector -[hidden]down- tip_corrector
    }

    component "experiment\nscript\n<$ma_script>" <<internal>> <<optional>> as exp
    scheduler -l-> exp: scope state,\nscans
    exp -r-> scheduler: scan\nparameters

    scheduler -l-> feedback_analyzer: scans
    feedback_analyzer .r.> scheduler: log\nproblem

    exp -[hidden]down- feedback_analyzer

    scheduler -d-> feedback_optimizer: problems
    feedback_optimizer .u.> scheduler: feedback\nweights


    scheduler -r-> tip_detector: scans
    tip_detector .l.> scheduler: log\nproblem

    scheduler -d-> tip_corrector: problems
    tip_corrector .u.> scheduler: corrective\nactions
  }

  spmcon <-r-> translator: low freq.\ncommands

  #+end_src

  #+RESULTS:
  :results:
  [[file:images/afspm_hl_example2.png]]
  :end:

* afspm Network framework

#+begin_src plantuml :file images/network_framework.png
  !include style.puml

  component "Component A" <<internal>> as comp_a {
    component "PUB\n//(zmq socket)//" <<socket>> as socket_a
    component proto_a <<message>> <<left>> [
    message
    {
        int num;
        str name;
    }
    ]

    component "list[bytes]" as bytes_a
    proto_a .u.> bytes_a: " serialize\n// (protobuf)//"
    bytes_a .u.> socket_a
  }

  component "Component B" <<internal>> as comp_b {
    component "SUB\n//(zmq socket)//" <<socket>> as socket_b
    component proto_b <<message>> <<left>> [
    message
    {
        int num;
        str name;
    }
    ]

    component "list[bytes]" as bytes_b
    socket_b .d.> bytes_b
    bytes_b .d.> proto_b: " deserialize\n// (protobuf)//"
  }

  interface addr <<node>> as "//zmq socket address//
<transport> :// <socket_uuid>
(e.g., tcp://localhost:9000)

__Transports may be__:
//inproc//: inter-thread
//ipc//: inter-process
//tcp//: tcp

__Main Socket Types__:
//PUB-SUB//: publisher-subscriber
//REQ-REP//: request-reply
//ROUTER//: routes requests (many-to-one)
//DEALER//: deals replies (one-to-many)
//PUSH-PULL//: pipeline distribution model"

  socket_a -r-> addr: "//published to address//"
  addr -r-> socket_b: "//sent to subscribers//"
  #+end_src

  #+RESULTS:
  :results:
  [[file:images/network_framework.png]]
  :end:
* afspm without microscope scheduler

#+header: :post attr_fit_width(data=*this*, org_percent=75, latex_percent=90)
#+begin_src plantuml :file images/afspm_without_scheduler.png
  !include style.puml
  !include microscopy.puml
  !include <material/network>
  !include <material/script>

  package "afspm abstraction" <<groupinternal>> {
    component "microscope\ntranslator\n<$ma_network>" <<interface>> <<required>> as translator {
      component "PUB" <<socket>> as dc_pub
      component REP <<socket>> as dc_rep
    }

    component "experiment\n<$ma_script>" <<internal>> as exp {
      component SUB <<socket>> as exp_sub
      component REQ <<socket>> as exp_req
    }

    dc_pub -d-> exp_sub: scans,\nstate
    exp_req -u-> dc_rep: control\nrequests
  }

  spmcon <-> translator: "low freq.\ncommands"
  #+end_src

  #+RESULTS:
  :results:
  #+attr_org: :width 75%
  #+attr_latex: :width .90\linewidth
  [[file:images/afspm_without_scheduler.png]]
  :end:

* afspm control

#+header: :post attr_fit_width(data=*this*, org_percent=80, latex_percent=90)
#+begin_src plantuml :file images/afspm_control.png
  !include style.puml
  !include microscopy.puml
  left to right direction

  !include <material/network>
  !include <material/tune>
  !include <material/chart_areaspline>
  !include <material/script>

  package "afspm abstraction" <<groupinternal>> {
    component "microscope\ntranslator\n<$ma_network>" <<interface>> <<required>> as translator {
      component REP <<socket>> as dc_rep
      component PUB <<socket>> as dc_pub
    }


    component "microscope\nscheduler\n<$ma_tune>" <<internal>> <<required>> as scheduler {
      component XPUB <<socket>> as scheduler_pub
      component SUB <<socket>> as scheduler_sub
      component "//cache//" as scheduler_cache
      scheduler_sub .. scheduler_cache
      scheduler_cache .. scheduler_pub

      component ROU <<socket>> as scheduler_rou
      component REQ <<socket>> as scheduler_req
      component "//control//" as scheduler_ctrl
      scheduler_req .. scheduler_ctrl
      scheduler_ctrl .. scheduler_rou
    }

    dc_pub -d-> scheduler_sub: data, \nstatus
    dc_rep <-d- scheduler_req: control\nrequests


    component "experiment\n<$ma_script>" <<internal>> as exp {
      component REQ <<socket>> as exp_req
      component SUB <<socket>> as exp_sub
    }

    scheduler_rou <-- exp_req: "scan parameters,\nstart / stop scan requests"
    scheduler_pub --> exp_sub: scope state

    component "visualizer\n<$ma_chart_areaspline>" <<internal>> as viz {
      component REQ <<socket>> as viz_req
      component SUB <<socket>> as viz_sub
    }

    scheduler_pub --> viz_sub: scope state
  }

  spmcon <--> translator: low freq. \ncommands
  #+end_src

  #+RESULTS:
  :results:
  #+attr_org: :width 80%
  #+attr_latex: :width .90\linewidth
  [[file:images/afspm_control.png]]
  :end:
* Translator Role
** Without afspm
#+begin_src plantuml :file images/code_reuse_without_afspm.png
  !include style.puml
  !include <material/microscope>
  !include <material/monitor>
  !include <material/script>

  component "**GXSM**\n<$ma_microscope> + <$ma_monitor>" <<color1>> as gxsm
  component "**Asylum Research**\n<$ma_microscope> + <$ma_monitor>" <<color2>> as asylum
  component "**Scienta Omicron**\n<$ma_microscope> + <$ma_monitor>" <<color3>> as omicron

  component "GXSM Script\n<$ma_script>" <<color1>> as gxsm_script
  component "Asylum Script\n<$ma_script>" <<color2>> as asylum_script
  component "Omicron Script\n<$ma_script>" <<color3>> as omicron_script

  gxsm <-d- gxsm_script: Custom \nPython \nAPI
  asylum<-d- asylum_script: Custom \nIGOR \nAPI
  omicron <-d- omicron_script: Custom \nPython \nAPI

  gxsm_script .r.> asylum_script: conversion / \nrewrite
  asylum_script .r.> omicron_script: conversion / \nrewrite
#+end_src

#+RESULTS:
:results:
[[file:images/code_reuse_without_afspm.png]]
:end:

** With afspm

#+begin_src plantuml :file images/code_reuse_with_afspm.png
  !include style.puml
  !include <material/microscope>
  !include <material/monitor>
  !include <material/script>
  !include <material/network>

  component "**GXSM**\n<$ma_microscope> + <$ma_monitor>" <<color1>> as gxsm
  component "**Asylum Research**\n<$ma_microscope> + <$ma_monitor>" <<color2>> as asylum
  component "**Scienta Omicron**\n<$ma_microscope> + <$ma_monitor>" <<color3>> as omicron

  'Enforce order'
  gxsm -[hidden]r- asylum
  asylum -[hidden]r- omicron

  package "afspm abstraction" <<groupinternal>> {
    component "microscope \ntranslators" <<internal>> as translators {
      component "GXSM \ntranslator\n<$ma_network>" <<color1>> <<required>> as gxsm_tr
      component "Asylum \ntranslator\n<$ma_network>" <<color2>> <<required>> as asylum_tr
      component "Omicron \ntranslator\n<$ma_network>" <<color3>> <<required>> as omicron_tr
    }

    component "afspm script\n<$ma_script>" <<internal>> as exp
  }

  gxsm_tr -u-> gxsm: Custom \nPython \nAPI
  asylum_tr -u-> asylum: Custom \nIGOR \nAPI
  omicron_tr -u-> omicron: Custom \nPython \nAPI

  exp .u.> gxsm_tr: "   afspm"
  exp .u.> asylum_tr: "   calls"
  exp .u.> omicron_tr

#+end_src

#+RESULTS:
:results:
[[file:images/code_reuse_with_afspm.png]]
:end:
