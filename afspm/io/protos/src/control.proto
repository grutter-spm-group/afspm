/*
  This file holds information tied to afspm control (e.g. control mode,
  any experimental problem that has arisen).
*/

edition = "2023";

/* Requests that can be sent to a ControlServer/ControlRouter. */
enum ControlRequest {
    REQ_UNDEFINED = 0;
    REQ_START_SCAN = 1;
    REQ_STOP_SCAN = 2;
    REQ_SET_SCAN_PARAMS = 3;
    REQ_SET_ZCTRL_PARAMS = 11;
    REQ_PARAM = 10;
    REQ_ACTION = 12;

    // The below are specific to ControlRouter
    REQ_REQUEST_CTRL = 4;
    REQ_RELEASE_CTRL = 5;
    REQ_ADD_EXP_PRBLM = 6;
    REQ_RMV_EXP_PRBLM = 7;
    // Admin requests
    REQ_SET_CONTROL_MODE = 8;
    REQ_END_EXPERIMENT = 9;
}

/* Responses expected from control requests. */
enum ControlResponse {
    REP_SUCCESS = 0;
    REP_FAILURE = 1;
    REP_CMD_NOT_SUPPORTED = 2;
    REP_NO_RESPONSE = 3;
    REP_ALREADY_UNDER_CONTROL = 4;
    REP_WRONG_CONTROL_MODE = 5;
    REP_NOT_IN_CONTROL = 6;
    REP_NOT_FREE = 7;
    REP_PARAM_INVALID = 12;  // Parameter does not exist.
    REP_PARAM_NOT_SUPPORTED = 9;
    REP_PARAM_ERROR = 10;  //  Trying to get/set the param failed.
    REP_WRONG_EXP_PROBLEM = 11;
    REP_ACTION_INVALID = 13;  // Action does not exist.
    REP_ACTION_NOT_SUPPORTED = 14;
    REP_ACTION_ERROR = 15;  // Trying to perform action failed.
}

/* Enum holding the current control mode of afspm. */
enum ControlMode {
  CM_UNDEFINED = 0;
  CM_MANUAL = 1;  // Under manual control
  CM_AUTOMATED = 2;  // Under (standard) automated control
  CM_PROBLEM = 3;  // There is an issue/problem!
}

/*
  Enum holding potential experiment issue/problems. When a given problem
  arises, the user (or some automation) must resolve the item and remove it
  from our 'problem map' to allow the experiment to continue.
*/
enum ExperimentProblem {
    EP_NONE = 0;
    EP_TIP_SHAPE_CHANGED = 1;
    EP_DEVICE_MALFUNCTION = 2;
    EP_FEEDBACK_NON_OPTIMAL = 3;
}

/* Contains the current overall SPM status. */
message ControlState {
    ControlMode control_mode = 1;
    string client_in_control_id = 2;
    repeated ExperimentProblem problems_set = 3;
}

/* Get/set a system parameter. See afspm.components.device.params.py.*/
message ParameterMsg {
    string parameter = 1;  // See afspm.components.translator.params
    string value = 2;  // If not provided, we treat as a get.
    string units = 3;  // Units associated to value.
}

/* Attempt to perform an action. */
message ActionMsg {
    string action = 1;  // See afspm.components.translator.actions
}
