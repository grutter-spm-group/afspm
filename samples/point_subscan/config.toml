# ----- General variables ----- #
# --- URLs --- #
pub_url = "tcp://127.0.0.1:9000"
psc_url = "tcp://127.0.0.1:9001"
analysis_url = "tcp://127.0.0.1:9002"
server_url = "tcp://127.0.0.1:6666"
router_url = "tcp://127.0.0.1:6667"


# --- Experiment Scan Aspects --- #
# - Physical Stuff - #
physical_units = 'nm'
full_scan_origin = [0, 0]
full_scan_size = [200, 200]
small_scan_origin = [0, 0]
small_scan_size = [40, 40]  # 200 / 5

# - Data Stuff - #
data_units = 'pixels'
full_scan_res = [256, 256]
small_scan_res = [512, 512]

sscans_per_fscan = 3
scans_per_reset = 4  # 3 + 1

visualization_style = 'imshow'  # 'surface'
visualization_colormap = 'nipy_spectral'

channel_id = 'Topo'


# --- Cache Aspects --- #
[full_scan_id]  # This should be specific to one channel
class = 'afspm.io.pubsub.logic.pbc_logic.create_roi_scan_envelope'
size = 'full_scan_size'
channel = 'channel_id'

[small_scan_id]  # This should be specific to one channel
class = 'afspm.io.pubsub.logic.pbc_logic.create_roi_scan_envelope'
size = 'small_scan_size'
channel = 'channel_id'

[proto_hist_list]  # This *should* mean to make a cache of these for each channel
class = 'afspm.io.pubsub.logic.pbc_logic.create_roi_proto_hist_list'
sizes_with_hist_list = [['full_scan_size', 1], ['small_scan_size', 'sscans_per_fscan']]

[pbc_scan_logic]
class = 'afspm.io.pubsub.logic.pbc_logic.PBCScanLogic'
proto_with_history_list = 'proto_hist_list'

[roi_cache_kwargs]
cache_logic = 'pbc_scan_logic'


# ----- PubSub ----- #
[translator_pub]
class = 'afspm.io.pubsub.publisher.Publisher'
url = 'pub_url'

[analysis_pub]
class = 'afspm.io.pubsub.publisher.Publisher'
url = 'analysis_url'

[scheduler_psc]
class = 'afspm.io.pubsub.cache.PubSubCache'
url = 'psc_url'
sub_url = 'pub_url'
update_cache_kwargs = 'roi_cache_kwargs'

[sub_spm]
class = 'afspm.io.pubsub.subscriber.Subscriber'
sub_url = 'psc_url'
extract_proto_kwargs = 'roi_cache_kwargs'
update_cache_kwargs = 'roi_cache_kwargs'

[sub_points]
class = 'afspm.io.pubsub.subscriber.Subscriber'
sub_url = 'analysis_url'

[exp_sub]
class = 'afspm.io.pubsub.subscriber.ComboSubscriber'
subs = ['sub_spm', 'sub_points']


# ----- Control Logic ----- #
[translator_server]
class = 'afspm.io.control.server.ControlServer'
url = 'server_url'

[scheduler_router]
class = 'afspm.io.control.router.ControlRouter'
server_url = 'server_url'
router_url = 'router_url'

[client]
class = 'afspm.io.control.client.ControlClient'
url = 'router_url'

[admin_client]
class = 'afspm.io.control.client.AdminControlClient'
url = 'router_url'


# ----- Components ----- #
# --- Experiment --- #
[exp_data]  # TODO: Try just as dict
class = 'experiment.ExperimentData'
phys_units = 'physical_units'
full_scan_res = 'full_scan_res'
full_scan_phys_origin = 'full_scan_origin'
full_scan_phys_size = 'full_scan_size'

data_units = 'data_units'
sub_scan_res = 'small_scan_res'
sub_scan_phys_size = 'small_scan_size'

sub_scans_per_full_scan = 3
points_id = 'SpatialPointWithScoreList'

[experiment]
component = true
class = 'afspm.components.scan.handler.ScanningComponent'

subscriber = 'exp_sub'
control_client = 'client'

rerun_wait_s = 5
get_next_params = 'experiment.get_next_scan_params'
next_params_kwargs = {'exp_data'= 'exp_data'}


# --- Analyzer --- #
[roi_data]
class = 'roi_analysis.ROIAnalysisData'

fscan_phys_size = 'full_scan_size'
num_points_to_output = 1

[roi_analysis]
component = true # uncomment to enable
class = 'afspm.components.component.AfspmComponent'

subscriber = 'sub_spm'
publisher = 'analysis_pub'

message_received_method = 'roi_analysis.analyze_full_scan'
methods_kwargs = {'analysis_data' = 'roi_data'}


# --- UI --- #
[ui]
#component = true
class = 'afspm.components.control_ui.AfspmControlUI'

subscriber = 'sub_spm'
control_client = 'admin_client'


# --- Fake Tip Detector --- #
[tip_state_data]
class = 'tip_analysis.TipStateData'
scan_period_raise_problem = 2

[tip_detector]
#component = true
class = 'afspm.components.component.AfspmComponent'

subscriber = 'sub_spm'
control_client = 'client'

message_received_method = 'tip_analysis.on_message_received'
methods_kwargs = {'tip_state'= 'tip_state_data'}


# --- Visualizer --- #
[viz_data]
class = 'visualize.VisualizerData'
num_scans_before_reset = 'scans_per_reset'
delete_sub_key = '40'  # Sub-scan size

[visualizer]
component = true
class = 'afspm.components.visualizer.Visualizer'

subscriber = 'sub_spm'
control_client = 'client'

message_received_method = 'visualize.reset_scans'
methods_kwargs = {'viz_data'= 'viz_data'}

list_keys = ['full_scan_id', 'small_scan_id']
cache_meaning_list = ['temporal', 'regions']
scan_phys_origin_list = ['full_scan_origin', 'full_scan_origin']
scan_phys_size_list = ['full_scan_size', 'full_scan_size']
visualization_style_list = ['visualization_style', 'visualization_style']
visualization_colormap_list = ['visualization_colormap', 'visualization_colormap']

visualize_undeclared_scans = true
scan_id = 'Scan2d'

[scheduler]
component = true
class = 'afspm.components.microscope.scheduler.MicroscopeScheduler'

pubsubcache = 'scheduler_psc'
router = 'scheduler_router'

[translator]
component = true
class = 'afspm.components.microscope.translators.image.translator.ImageTranslator'

physical_origin = 'full_scan_origin'
physical_size = 'full_scan_size'
physical_units = 'physical_units'
data_units = 'data_units'

channel_id = 'channel_id'

scan_time_s = 2
move_time_s = 0.5

publisher = 'translator_pub'
control_server = 'translator_server'
subscriber = 'sub_spm'

[metadata]
#component = true
class = 'afspm.components.scan.metadata.ScanMetadataWriter'
subscriber = 'sub_spm'
